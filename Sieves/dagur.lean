import ExtrDisc.Basic
import Mathlib.CategoryTheory.Sites.Coverage
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Products
import Mathlib.CategoryTheory.Limits.Preserves.Opposites
import Mathlib.CategoryTheory.Limits.Preserves.Finite
import Sieves.isSheafForPullbackSieve

universe u v
section HasPullbackOfRightMono

open CategoryTheory Opposite CategoryTheory.Limits Functor

variable (C : Type u) [Category.{v, u} C] 

class HasPullbackOfIsIsodesc : Prop where
    HasPullback : ‚àÄ {X Z : C} {Œ± : Type _} (f : X ‚ü∂ Z) {Y : (a : Œ±) ‚Üí C}
    (i : (a : Œ±) ‚Üí Y a ‚ü∂ Z) [Fintype Œ±] [HasCoproduct Y] [IsIso (Sigma.desc i)] (a : Œ±),
    HasPullback f (i a)

instance [HasPullbackOfIsIsodesc C] {X Z : C} {Œ± : Type _} (f : X ‚ü∂ Z) {Y : (a : Œ±) ‚Üí C} 
    (i : (a : Œ±) ‚Üí Y a ‚ü∂ Z) [Fintype Œ±] [HasCoproduct Y] [IsIso (Sigma.desc i)] (a : Œ±) :  
    HasPullback f (i a) := HasPullbackOfIsIsodesc.HasPullback f i a

instance [HasPullbacks C] : HasPullbackOfIsIsodesc C := ‚ü®fun _ _ _ => inferInstance‚ü©

end HasPullbackOfRightMono

section Coverage
namespace CategoryTheory

variable (C : Type u) [Category.{v} C] 

open Sieve CategoryTheory.Limits Opposite

variable {C}

def DagurSieveIso [HasFiniteCoproducts C] (B : C) := { S | ‚àÉ (Œ± : Type) (_ : Fintype Œ±) (X : Œ± ‚Üí C)
  (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B)),
    S = Presieve.ofArrows X œÄ ‚àß IsIso (Sigma.desc œÄ) }

def DagurSieveSingle (B : C) := { S | ‚àÉ (X : C) (f : X ‚ü∂ B), S = Presieve.ofArrows (fun (_ : Unit) ‚Ü¶ X)
      (fun (_ : Unit) ‚Ü¶ f) ‚àß Epi f }

variable [HasFiniteCoproducts C] (C)

def Extensivity [HasPullbackOfIsIsodesc C] : Prop :=
  ‚àÄ {Œ± : Type} [Fintype Œ±] {X : C} {Z : Œ± ‚Üí C} (œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X)
  {Y : C} (f : Y ‚ü∂ X) (_ : IsIso (Sigma.desc œÄ)),
     IsIso (Sigma.desc ((fun _ ‚Ü¶ pullback.fst) : (a : Œ±) ‚Üí pullback f (œÄ a) ‚ü∂ _))

def EverythingIsProjective : Prop :=
  ‚àÄ X : C, Projective X

def dagurCoverage [HasFiniteCoproducts C] [HasPullbackOfIsIsodesc C]
    (h_proj : EverythingIsProjective C) (h_ext : Extensivity C) : Coverage C where
  covering B :=   (DagurSieveIso B) ‚à™ (DagurSieveSingle B)
  pullback := by
    rintro X Y f S (‚ü®Œ±, hŒ±, Z, œÄ, hS, h_iso‚ü© | ‚ü®Z, œÄ, hœÄ, h_epi‚ü©)
    ¬∑ let Z' : Œ± ‚Üí C := fun a ‚Ü¶ pullback f (œÄ a)
      set œÄ' : (a : Œ±) ‚Üí Z' a ‚ü∂ Y := fun a ‚Ü¶ pullback.fst with hœÄ'
      set S' := @Presieve.ofArrows C _ _ Œ± Z' œÄ' with hS'
      use S'
      constructor
      ¬∑ rw [Set.mem_union]
        apply Or.intro_left
        rw [DagurSieveIso]
        constructor
        refine ‚ü®hŒ±, Z', œÄ', ‚ü®by simp only, ?_‚ü©‚ü©
        ¬∑ rw [hœÄ']
          exact h_ext (fun x => œÄ x) f h_iso
      ¬∑ rw [hS', Presieve.FactorsThruAlong]
        intro W g hg
        rcases hg with ‚ü®a‚ü©
        refine ‚ü®Z a, pullback.snd, œÄ a, ?_, by rw [CategoryTheory.Limits.pullback.condition]‚ü©
        rw [hS]
        refine Presieve.ofArrows.mk a
    ¬∑ set S' := Presieve.singleton (ùüô Y) with hS'
      use S'
      constructor
      ¬∑ apply Or.intro_right
        rw [DagurSieveSingle]
        refine ‚ü®Y, ùüô _, by {rw [Presieve.ofArrows_pUnit (ùüô Y)]}, instEpiIdToCategoryStruct Y‚ü©
      ¬∑ rw [hS', Presieve.FactorsThruAlong]
        intro W g hg
        cases hg
        simp only [Category.id_comp]
        use Z
        use @Projective.factorThru C _ Y X Z ?_ f œÄ h_epi
        exact h_proj Y
        use œÄ
        constructor
        ¬∑ cases hœÄ
          rw [Presieve.ofArrows_pUnit]
          exact Presieve.singleton.mk
        ¬∑ have : Projective Y
          exact h_proj Y
          exact @Projective.factorThru_comp C _ Y X Z this f œÄ h_epi

variable [HasPullbackOfIsIsodesc C] {C}

lemma isPullbackSieve_DagurSieveIso {X : C} {S : Presieve X}
    (hS : S ‚àà DagurSieveIso X) : isPullbackPresieve S := by
  rcases hS with ‚ü®Œ±, _, Z, œÄ, hS, HIso‚ü© 
  intro Y‚ÇÅ Y‚ÇÇ f hf g hg
  rw [hS] at hf hg
  cases' hg with b
  apply HasPullbackOfIsIsodesc.HasPullback f

lemma DagurSieveIsoFinite {X : C} {S : Presieve X} (hS : S ‚àà DagurSieveIso X) :
    Finite (Œ£Y, { f : Y ‚ü∂ X // S f }) := by
  rcases hS with ‚ü®Œ±, _, Z, œÄ, hS, _‚ü©
  classical
  refine' Fintype.finite (Fintype.ofSurjective (fun a => ‚ü®Z a, œÄ a, hS ‚ñ∏ Presieve.ofArrows.mk a‚ü©)
    (fun ‚ü®Y, ‚ü®f, hf‚ü©‚ü© => _))
  cases' (hS ‚ñ∏ hf) with a h
  exact ‚ü®a, rfl‚ü©

lemma isSheafForDagurSieveIso {X : C} {S : Presieve X} (hS : S ‚àà DagurSieveIso X)
    {F : C·µí·µñ ‚•§ Type max u v}
    (hF : PreservesFiniteProducts F) :
    Presieve.IsSheafFor F S := by    
  have hFinite := DagurSieveIsoFinite hS
  obtain ‚ü®n, ‚ü®e‚ü©‚ü© := finite_iff_exists_equiv_fin.1 hFinite
  let E := (Discrete.equivalence e).symm
  refine' (Equalizer.Presieve.sheaf_condition' F <| isPullbackSieve_DagurSieveIso hS).2 _
  rcases hS with ‚ü®Œ±, _, Z, œÄ, hS, HIso‚ü©
  rw [Limits.Types.type_equalizer_iff_unique]
  intro y hy
  have hpreserves : PreservesLimitsOfShape (Discrete (Œ£Y, { f : Y ‚ü∂ X // S f })) F := by
    suffices PreservesLimitsOfShape (Discrete (Fin n)) F by
      ¬∑ exact Limits.preservesLimitsOfShapeOfEquiv E F
    have := (hF.preserves (Fin n))
    infer_instance
  let œÜ : F.obj (‚àè fun f : Œ£Y, { f : Y ‚ü∂ X // S f } => (op f.1)) ‚âÖ
      ‚àè fun f : Œ£Y, { f : Y ‚ü∂ X // S f } => F.obj (op f.1) :=
    Limits.PreservesProduct.iso F (fun f : Œ£Y, { f : Y ‚ü∂ X // S f } => (op f.1))

  sorry

end CategoryTheory

end Coverage