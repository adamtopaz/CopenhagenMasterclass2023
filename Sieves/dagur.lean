import ExtrDisc.Basic
import Mathlib.CategoryTheory.Sites.Coverage
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Products
import Sieves.ProdCoprod
import Mathlib.CategoryTheory.Limits.Preserves.Finite
import Sieves.isSheafForPullbackSieve

universe u v w
section HasPullbackOfRightMono

open CategoryTheory Opposite CategoryTheory.Limits Functor

variable (C : Type u) [Category.{v, u} C] 

class HasPullbackOfIsIsodesc : Prop where
    HasPullback : ‚àÄ {X Z : C} {Œ± : Type _} (f : X ‚ü∂ Z) {Y : (a : Œ±) ‚Üí C}
    (i : (a : Œ±) ‚Üí Y a ‚ü∂ Z) [Fintype Œ±] [HasCoproduct Y] [IsIso (Sigma.desc i)] (a : Œ±),
    HasPullback f (i a)

instance [HasPullbackOfIsIsodesc C] {X Z : C} {Œ± : Type _} (f : X ‚ü∂ Z) {Y : (a : Œ±) ‚Üí C} 
    (i : (a : Œ±) ‚Üí Y a ‚ü∂ Z) [Fintype Œ±] [HasCoproduct Y] [IsIso (Sigma.desc i)] (a : Œ±) :  
    HasPullback f (i a) := HasPullbackOfIsIsodesc.HasPullback f i a

instance [HasPullbacks C] : HasPullbackOfIsIsodesc C := ‚ü®fun _ _ _ => inferInstance‚ü©

end HasPullbackOfRightMono

section Coverage
namespace CategoryTheory

variable (C : Type u) [Category.{v} C] 

open Sieve CategoryTheory.Limits Opposite

variable {C}

def DagurSieveIso [HasFiniteCoproducts C] (B : C) := { S | ‚àÉ (Œ± : Type) (_ : Fintype Œ±) (X : Œ± ‚Üí C)
  (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B)),
    S = Presieve.ofArrows X œÄ ‚àß IsIso (Sigma.desc œÄ) }

def DagurSieveSingle (B : C) := { S | ‚àÉ (X : C) (f : X ‚ü∂ B), S = Presieve.ofArrows (fun (_ : Unit) ‚Ü¶ X)
      (fun (_ : Unit) ‚Ü¶ f) ‚àß Epi f }

variable [HasFiniteCoproducts C] (C)

def Extensivity [HasPullbackOfIsIsodesc C] : Prop :=
  ‚àÄ {Œ± : Type} [Fintype Œ±] {X : C} {Z : Œ± ‚Üí C} (œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X)
  {Y : C} (f : Y ‚ü∂ X) (_ : IsIso (Sigma.desc œÄ)),
     IsIso (Sigma.desc ((fun _ ‚Ü¶ pullback.fst) : (a : Œ±) ‚Üí pullback f (œÄ a) ‚ü∂ _))

def EverythingIsProjective : Prop :=
  ‚àÄ X : C, Projective X

def dagurCoverage [HasFiniteCoproducts C] [HasPullbackOfIsIsodesc C]
    (h_proj : EverythingIsProjective C) (h_ext : Extensivity C) : Coverage C where
  covering B :=   (DagurSieveIso B) ‚à™ (DagurSieveSingle B)
  pullback := by
    rintro X Y f S (‚ü®Œ±, hŒ±, Z, œÄ, hS, h_iso‚ü© | ‚ü®Z, œÄ, hœÄ, h_epi‚ü©)
    ¬∑ let Z' : Œ± ‚Üí C := fun a ‚Ü¶ pullback f (œÄ a)
      set œÄ' : (a : Œ±) ‚Üí Z' a ‚ü∂ Y := fun a ‚Ü¶ pullback.fst with hœÄ'
      set S' := @Presieve.ofArrows C _ _ Œ± Z' œÄ' with hS'
      use S'
      constructor
      ¬∑ rw [Set.mem_union]
        apply Or.intro_left
        rw [DagurSieveIso] 
        constructor
        refine ‚ü®hŒ±, Z', œÄ', ‚ü®by simp only, ?_‚ü©‚ü©
        ¬∑ rw [hœÄ']
          exact h_ext (fun x => œÄ x) f h_iso
      ¬∑ rw [hS', Presieve.FactorsThruAlong]
        intro W g hg
        rcases hg with ‚ü®a‚ü©
        refine ‚ü®Z a, pullback.snd, œÄ a, ?_, by rw [CategoryTheory.Limits.pullback.condition]‚ü©
        rw [hS]
        refine Presieve.ofArrows.mk a
    ¬∑ set S' := Presieve.singleton (ùüô Y) with hS'
      use S'
      constructor
      ¬∑ apply Or.intro_right
        rw [DagurSieveSingle]
        refine ‚ü®Y, ùüô _, by {rw [Presieve.ofArrows_pUnit (ùüô Y)]}, instEpiIdToCategoryStruct Y‚ü©
      ¬∑ rw [hS', Presieve.FactorsThruAlong]
        intro W g hg
        cases hg
        simp only [Category.id_comp]
        use Z
        use @Projective.factorThru C _ Y X Z ?_ f œÄ h_epi
        exact h_proj Y
        use œÄ
        constructor
        ¬∑ cases hœÄ
          rw [Presieve.ofArrows_pUnit]
          exact Presieve.singleton.mk
        ¬∑ have : Projective Y
          exact h_proj Y
          exact @Projective.factorThru_comp C _ Y X Z this f œÄ h_epi

def EpiPullbackOfEpi [HasPullbacks C] : Prop := ‚àÄ {X Y Z : C} (f : Y ‚ü∂ X) (œÄ : Z ‚ü∂ X) [Epi œÄ], 
    Epi (@pullback.fst _ _ _ _ _ f œÄ _)

def dagurCoverage' [HasFiniteCoproducts C] [HasPullbacks C] (h_epi_epi : EpiPullbackOfEpi C) 
    (h_ext : Extensivity C) : Coverage C where
  covering B := (DagurSieveIso B) ‚à™ (DagurSieveSingle B) 
  pullback := by 
    rintro X Y f S (‚ü®Œ±, hŒ±, Z, œÄ, hS, h_iso‚ü© | ‚ü®Z, œÄ, hœÄ, h_epi‚ü©)
    ¬∑ let Z' : Œ± ‚Üí C := fun a ‚Ü¶ pullback f (œÄ a)
      set œÄ' : (a : Œ±) ‚Üí Z' a ‚ü∂ Y := fun a ‚Ü¶ pullback.fst with hœÄ'
      set S' := @Presieve.ofArrows C _ _ Œ± Z' œÄ' with hS'
      use S'
      constructor
      ¬∑ rw [Set.mem_union]
        apply Or.intro_left
        rw [DagurSieveIso]
        constructor
        refine ‚ü®hŒ±, Z', œÄ', ‚ü®by simp only, ?_‚ü©‚ü©
        ¬∑ rw [hœÄ']
          exact h_ext (fun x => œÄ x) f h_iso
      ¬∑ rw [hS', Presieve.FactorsThruAlong]
        intro W g hg
        rcases hg with ‚ü®a‚ü©
        refine ‚ü®Z a, pullback.snd, œÄ a, ?_, by rw [CategoryTheory.Limits.pullback.condition]‚ü©
        rw [hS]
        refine Presieve.ofArrows.mk a
    ¬∑ set S' := Presieve.singleton (@pullback.fst _ _ _ _ _ f œÄ _) with hS'
      use S'
      constructor
      ¬∑ right 
        rw [DagurSieveSingle]
        refine' ‚ü®(pullback f œÄ), _, by {rw [Presieve.ofArrows_pUnit _]}, h_epi_epi f œÄ‚ü©
      ¬∑ rw [hS', Presieve.FactorsThruAlong]
        rintro _ _ ‚ü®‚ü© 
        refine' ‚ü®Z, pullback.snd, œÄ, ‚ü®_, by rw [pullback.condition]‚ü©‚ü©
        rw [hœÄ] 
        exact Presieve.ofArrows.mk ()

variable [HasPullbackOfIsIsodesc C] {C}

lemma isPullbackSieve_DagurSieveIso {X : C} {S : Presieve X}
    (hS : S ‚àà DagurSieveIso X) : isPullbackPresieve S := by
  rcases hS with ‚ü®Œ±, _, Z, œÄ, hS, HIso‚ü© 
  intro Y‚ÇÅ Y‚ÇÇ f hf g hg
  rw [hS] at hf hg
  cases' hg with b
  apply HasPullbackOfIsIsodesc.HasPullback f

lemma DagurSieveIsoFinite {X : C} {S : Presieve X} (hS : S ‚àà DagurSieveIso X) :
    Finite (Œ£Y, { f : Y ‚ü∂ X // S f }) := by
  rcases hS with ‚ü®Œ±, _, Z, œÄ, hS, _‚ü©
  classical
  refine' Fintype.finite (Fintype.ofSurjective (fun a => ‚ü®Z a, œÄ a, hS ‚ñ∏ Presieve.ofArrows.mk a‚ü©)
    (fun ‚ü®Y, ‚ü®f, hf‚ü©‚ü© => _))
  cases' (hS ‚ñ∏ hf) with a h
  exact ‚ü®a, rfl‚ü©

def v {Œ± : Type} {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) : Œ± ‚Üí Œ£(Y : C), { f : Y ‚ü∂ X // S f } :=
  fun a => ‚ü®Z a, œÄ a, hS ‚ñ∏ Presieve.ofArrows.mk a‚ü©

lemma vsurj {Œ± : Type} {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) : Function.Surjective (v hS) := fun ‚ü®Y, ‚ü®f, hf‚ü©‚ü© => by
  cases' (hS ‚ñ∏ hf) with a h
  exact ‚ü®a, rfl‚ü©

lemma v.fst {Œ± : Type} {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) (a : Œ±) : (v hS a).1 = Z a := rfl

lemma v.snd {Œ± : Type} {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) (a : Œ±) : (v hS a).2.1 = œÄ a := rfl

noncomputable
def w {Œ± : Type} {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) : (Œ£(Y : C), { f : Y ‚ü∂ X // S f }) ‚Üí Œ± :=
  Classical.choose (vsurj hS).hasRightInverse

lemma vw {Œ± : Type} {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) : Function.RightInverse (w hS) (v hS) :=
  Classical.choose_spec _

lemma Zf {Œ± : Type} {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) (f : (Y : C) √ó { f // S f }) : Z (w hS f) = f.fst := by
    nth_rewrite 2 [‚Üê (vw hS) f]
    exact v.fst hS (w hS f)

noncomputable
def IsotoZ {Œ± : Type} {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) (f : (Œ£(Y : C), { f : Y ‚ü∂ X // S f })) :
  op (f.1) ‚âÖ op (Z ((w hS) f)) := Iso.op <| eqToIso (Zf hS f)


noncomputable
def FintypeT {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
     (hS: S = Presieve.ofArrows Z œÄ) : Fintype (Œ£(Y : C), { f : Y ‚ü∂ X // S f }) := by
  classical
  exact Fintype.ofSurjective _ (vsurj hS)

lemma HasProductT {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
     (hS: S = Presieve.ofArrows Z œÄ) : HasProduct
     fun (f : (Œ£(Y : C), { f : Y ‚ü∂ X // S f })) => (op f.1) := by
  suffices Finite (Œ£(Y : C), { f : Y ‚ü∂ X // S f }) by
    ¬∑ infer_instance
  exact Fintype.finite <| FintypeT hS

noncomputable
def E {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
     (hS: S = Presieve.ofArrows Z œÄ) :
     haveI := FintypeT hS
     (Œ£(Y : C), { f : Y ‚ü∂ X // S f }) ‚âÉ
     Fin (Fintype.card (Œ£(Y : C), { f : Y ‚ü∂ X // S f })) :=  
  @Fintype.equivFin _ (_)

noncomputable
def comparison {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) (F : C·µí·µñ ‚•§ Type max u v) :
    haveI := HasProductT hS
    (‚àè fun a => F.obj (op (Z a))) ‚ü∂ 
    ‚àè fun (f : (Œ£(Y : C), { f : Y ‚ü∂ X // S f })) => F.obj (op f.1) :=
  haveI := HasProductT hS
  Pi.lift (fun f => Pi.œÄ _ _ ‚â´ F.map (IsotoZ hS f).inv)

noncomputable
def comparisoninv {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) (F : C·µí·µñ ‚•§ Type max u v) :
    haveI := HasProductT hS
    (‚àè fun (f : (Œ£(Y : C), { f : Y ‚ü∂ X // S f })) => F.obj (op f.1)) ‚ü∂
    ‚àè fun a => F.obj (op (Z a)) :=
  haveI := HasProductT hS
  Pi.lift (fun a => Pi.œÄ _ (v hS a) ‚â´ F.map (ùüô _)) 
  
noncomputable
def fromFirst {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí C} {X : C} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {S : Presieve X}
    (hS: S = Presieve.ofArrows Z œÄ) {F : C·µí·µñ ‚•§ Type max u v} (hF : PreservesFiniteProducts F)
    (HIso : IsIso (Sigma.desc œÄ)) :
    Equalizer.FirstObj F S ‚ü∂ F.obj (op X) :=
  haveI : PreservesLimit (Discrete.functor fun a => op (Z a)) F := by
    haveI := (hF.preserves Œ±); infer_instance
  comparisoninv hS F ‚â´ ((Limits.PreservesProduct.iso F (fun a => op <| Z a)).inv ‚â´
    F.map (CoprodToProd Z).inv ‚â´ F.map (inv (Sigma.desc œÄ).op))

lemma piCompInvdesc {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí C} {X : C} (œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X)
    (HIso : IsIso (Sigma.desc œÄ)) (a : Œ±) : œÄ a ‚â´ inv (Sigma.desc œÄ) = Sigma.Œπ _ a := by
  simp

lemma PreservesProduct.isoInvCompMap {C : Type u} [Category C] {D : Type v} [Category D] (F : C ‚•§ D)
    {J : Type w} {f : J ‚Üí C} [HasProduct f] [HasProduct (fun j => F.obj (f j))]
    [PreservesLimit (Discrete.functor f) F] (j : J) :
    (PreservesProduct.iso F f).inv ‚â´ F.map (Pi.œÄ _ j) = Pi.œÄ _ j :=
  IsLimit.conePointUniqueUpToIso_inv_comp _ (limit.isLimit _) (‚ü®j‚ü© : Discrete J)

lemma isSheafForDagurSieveIsIsoFork {X : C} {S : Presieve X} (hS : S ‚àà DagurSieveIso X)
    {F : C·µí·µñ ‚•§ Type max u v}
    (hF : PreservesFiniteProducts F) :
    IsIso (Equalizer.forkMap F S) := by
  rcases hS with ‚ü®Œ±, _, Z, œÄ, hS, HIso‚ü©
  haveI : PreservesLimit (Discrete.functor fun a => op (Z a)) F := by
      haveI := (hF.preserves Œ±); infer_instance
  refine' ‚ü®fromFirst hS hF HIso, _, _‚ü©
  ¬∑ unfold fromFirst 
    simp only [‚Üê Category.assoc]
    rw [Functor.map_inv, IsIso.comp_inv_eq, Category.id_comp, ‚Üê Functor.mapIso_inv,
      Iso.comp_inv_eq, Functor.mapIso_hom, Iso.comp_inv_eq, ‚Üê Functor.map_comp, descOpCompCoprodToProd]
    have : F.map (Pi.lift fun a => (œÄ a).op) ‚â´ (PreservesProduct.iso F fun a => op (Z a)).hom =
      Pi.lift (fun a => F.map ((Sigma.Œπ Z a ‚â´ (Sigma.desc œÄ)).op)) := by simp --this can be a general lemma
    erw [this]
    refine' funext (fun s => _)
    simp only [types_comp_apply, colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app]
    ext a
    rw [Types.Limit.lift_œÄ_apply]
    dsimp [comparisoninv]
    simp_rw [v.fst]
    simp only [Functor.map_id, Category.comp_id]
    rw [Types.Limit.lift_œÄ_apply]
    simp only [Fan.mk_pt, Equalizer.forkMap, Fan.mk_œÄ_app, Types.pi_lift_œÄ_apply, v.snd]
  ¬∑ refine' Limits.Pi.hom_ext _ _ (fun f => _)
    dsimp [Equalizer.forkMap]
    rw [Category.id_comp, Category.assoc, limit.lift_œÄ, Limits.Fan.mk_œÄ_app]
    simp only
    obtain ‚ü®a, ha‚ü© := vsurj hS f
    unfold fromFirst
    simp only [Category.assoc]
    rw [‚Üê Functor.map_comp, ‚Üê op_inv, ‚Üê op_comp, ‚Üê ha, v.snd hS, piCompInvdesc,
      ‚Üê Functor.map_comp, CoprodToProdInvComp.Œπ, @PreservesProduct.isoInvCompMap _ _ _ _ F _ _ _ _ (_) a]
    simp only [comparisoninv, op_id, limit.lift_œÄ, Fan.mk_pt, Fan.mk_œÄ_app]
    erw [F.map_id, Category.comp_id]    

lemma isSheafForDagurSieveIso {X : C} {S : Presieve X} (hS : S ‚àà DagurSieveIso X)
    {F : C·µí·µñ ‚•§ Type max u v}
    (hF : PreservesFiniteProducts F) :
    Presieve.IsSheafFor F S := by    
  refine' (Equalizer.Presieve.sheaf_condition' F <| isPullbackSieve_DagurSieveIso hS).2 _
  rw [Limits.Types.type_equalizer_iff_unique]
  dsimp [Equalizer.FirstObj]
  suffices IsIso (Equalizer.forkMap F S) by
    ¬∑ intro y _
      refine' ‚ü®inv (Equalizer.forkMap F S) y, _, fun y‚ÇÅ hy‚ÇÅ => _‚ü©
      ¬∑ change (inv (Equalizer.forkMap F S) ‚â´ (Equalizer.forkMap F S)) y = y 
        rw [IsIso.inv_hom_id, types_id_apply]
      ¬∑ replace hy‚ÇÅ := congr_arg (inv (Equalizer.forkMap F S)) hy‚ÇÅ
        change ((Equalizer.forkMap F S) ‚â´ inv (Equalizer.forkMap F S)) _ = _ at hy‚ÇÅ
        rwa [IsIso.hom_inv_id, types_id_apply] at hy‚ÇÅ
  exact isSheafForDagurSieveIsIsoFork hS hF

end CategoryTheory

end Coverage