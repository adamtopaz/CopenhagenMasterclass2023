import Mathlib.Topology.Category.CompHaus.ExplicitLimits

universe u

open CategoryTheory CategoryTheory.Limits

namespace CompHaus

variable {Œ± : Type} [Fintype Œ±] (Z : Œ± ‚Üí CompHaus.{u})

section Iso

noncomputable
def toFiniteCoproduct : ‚àê Z ‚ü∂ finiteCoproduct Z :=
  Sigma.desc <| fun a => finiteCoproduct.Œπ Z a ‚â´ (ùüô _)

noncomputable
def fromFiniteCoproduct : finiteCoproduct Z ‚ü∂ ‚àê Z :=
  finiteCoproduct.desc Z <| fun a => (Sigma.Œπ Z a)
  
@[simp]
theorem toFiniteCoproductCompFromFiniteCoproduct :
    (toFiniteCoproduct Z ‚â´ fromFiniteCoproduct Z) = ùüô _ := by
  ext
  simp [toFiniteCoproduct, fromFiniteCoproduct]

@[simp]
theorem FromFiniteCoproductComptToFiniteCoproduct :
    (fromFiniteCoproduct Z ‚â´ toFiniteCoproduct Z) = ùüô _ := by
  refine' finiteCoproduct.hom_ext _ _ _ (fun a => _)
  simp [toFiniteCoproduct, fromFiniteCoproduct]

@[simps]
noncomputable
def FromFiniteCoproductIso : finiteCoproduct Z ‚âÖ ‚àê Z where
  hom := fromFiniteCoproduct Z
  inv := toFiniteCoproduct Z
  hom_inv_id := FromFiniteCoproductComptToFiniteCoproduct Z
  inv_hom_id := toFiniteCoproductCompFromFiniteCoproduct Z

@[simps]
noncomputable
def ToFiniteCoproductIso : ‚àê Z ‚âÖ finiteCoproduct Z where
  hom := toFiniteCoproduct Z
  inv := fromFiniteCoproduct Z
  hom_inv_id := toFiniteCoproductCompFromFiniteCoproduct Z
  inv_hom_id := FromFiniteCoproductComptToFiniteCoproduct Z

theorem IsIsotoFiniteCoproduct :
    IsIso (toFiniteCoproduct Z) :=
  ‚ü®fromFiniteCoproduct Z, by simp, by simp‚ü©

theorem IsIsofromFiniteCoproduct :
    IsIso (fromFiniteCoproduct Z) :=
  ‚ü®toFiniteCoproduct Z, by simp, by simp‚ü©

@[simp]
theorem Sigma.ŒπCompToFiniteCoproduct (a : Œ±) :
    (Sigma.Œπ Z a) ‚â´ toFiniteCoproduct Z = finiteCoproduct.Œπ Z a := by
  simp [toFiniteCoproduct]
  
@[simp]
theorem finiteCoproduct.ŒπCompFromFiniteCoproduct (a : Œ±) :
    (finiteCoproduct.Œπ Z a) ‚â´ fromFiniteCoproduct Z = Sigma.Œπ Z a := by
  simp [fromFiniteCoproduct]

@[simps] noncomputable
def toFiniteCoproductHomeo : (‚àê Z : _) ‚âÉ‚Çú finiteCoproduct Z where
  toFun := toFiniteCoproduct Z
  invFun := fromFiniteCoproduct Z
  left_inv := fun x => by
    change (toFiniteCoproduct Z ‚â´ fromFiniteCoproduct Z) x = x
    simp only [toFiniteCoproductCompFromFiniteCoproduct, id_apply]
  right_inv := fun x => by
    change (fromFiniteCoproduct Z ‚â´ toFiniteCoproduct Z) x = x
    simp only [FromFiniteCoproductComptToFiniteCoproduct, id_apply]
  continuous_toFun := (toFiniteCoproduct Z).continuous_toFun
  continuous_invFun := (fromFiniteCoproduct Z).continuous_toFun

theorem toFiniteCoproduct.OpenEmbedding : OpenEmbedding (toFiniteCoproductHomeo Z) :=
  Homeomorph.openEmbedding (toFiniteCoproductHomeo Z)

end Iso

end CompHaus