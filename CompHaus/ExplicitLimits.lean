import Mathlib.Topology.Category.CompHaus.ExplicitLimits

/-  This should go straight in the existing file 
    `Mathlib.Topology.Category.CompHaus.ExplicitLimits` -/

universe u

open CategoryTheory CategoryTheory.Limits

namespace CompHaus

variable {Œ± : Type} [Fintype Œ±] (Z : Œ± ‚Üí CompHaus.{u})

section FiniteCoproducts

section Iso

noncomputable
def toFiniteCoproduct : ‚àê Z ‚ü∂ finiteCoproduct Z :=
  Sigma.desc <| fun a => finiteCoproduct.Œπ Z a ‚â´ (ùüô _)

noncomputable
def fromFiniteCoproduct : finiteCoproduct Z ‚ü∂ ‚àê Z :=
  finiteCoproduct.desc Z <| fun a => (Sigma.Œπ Z a)
  
@[simp]
theorem toFiniteCoproductCompFromFiniteCoproduct :
    (toFiniteCoproduct Z ‚â´ fromFiniteCoproduct Z) = ùüô _ := by
  ext
  simp [toFiniteCoproduct, fromFiniteCoproduct]

@[simp]
theorem FromFiniteCoproductComptToFiniteCoproduct :
    (fromFiniteCoproduct Z ‚â´ toFiniteCoproduct Z) = ùüô _ := by
  refine' finiteCoproduct.hom_ext _ _ _ (fun a => _)
  simp [toFiniteCoproduct, fromFiniteCoproduct]

@[simps]
noncomputable
def FromFiniteCoproductIso : finiteCoproduct Z ‚âÖ ‚àê Z where
  hom := fromFiniteCoproduct Z
  inv := toFiniteCoproduct Z
  hom_inv_id := FromFiniteCoproductComptToFiniteCoproduct Z
  inv_hom_id := toFiniteCoproductCompFromFiniteCoproduct Z

@[simps]
noncomputable
def ToFiniteCoproductIso : ‚àê Z ‚âÖ finiteCoproduct Z where
  hom := toFiniteCoproduct Z
  inv := fromFiniteCoproduct Z
  hom_inv_id := toFiniteCoproductCompFromFiniteCoproduct Z
  inv_hom_id := FromFiniteCoproductComptToFiniteCoproduct Z

theorem IsIsotoFiniteCoproduct :
    IsIso (toFiniteCoproduct Z) :=
  ‚ü®fromFiniteCoproduct Z, by simp, by simp‚ü©

theorem IsIsofromFiniteCoproduct :
    IsIso (fromFiniteCoproduct Z) :=
  ‚ü®toFiniteCoproduct Z, by simp, by simp‚ü©

@[simp]
theorem Sigma.ŒπCompToFiniteCoproduct (a : Œ±) :
    (Sigma.Œπ Z a) ‚â´ toFiniteCoproduct Z = finiteCoproduct.Œπ Z a := by
  simp [toFiniteCoproduct]
  
@[simp]
theorem finiteCoproduct.ŒπCompFromFiniteCoproduct (a : Œ±) :
    (finiteCoproduct.Œπ Z a) ‚â´ fromFiniteCoproduct Z = Sigma.Œπ Z a := by
  simp [fromFiniteCoproduct]

@[simps] noncomputable
def toFiniteCoproductHomeo : (‚àê Z : _) ‚âÉ‚Çú finiteCoproduct Z where
  toFun := toFiniteCoproduct Z
  invFun := fromFiniteCoproduct Z
  left_inv := fun x => by
    change (toFiniteCoproduct Z ‚â´ fromFiniteCoproduct Z) x = x
    simp only [toFiniteCoproductCompFromFiniteCoproduct, id_apply]
  right_inv := fun x => by
    change (fromFiniteCoproduct Z ‚â´ toFiniteCoproduct Z) x = x
    simp only [FromFiniteCoproductComptToFiniteCoproduct, id_apply]
  continuous_toFun := (toFiniteCoproduct Z).continuous_toFun
  continuous_invFun := (fromFiniteCoproduct Z).continuous_toFun

theorem toFiniteCoproduct.OpenEmbedding : OpenEmbedding (toFiniteCoproductHomeo Z) :=
  Homeomorph.openEmbedding (toFiniteCoproductHomeo Z)

end Iso

lemma finiteCoproduct.Œπ_injective {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí CompHaus.{u}} 
    (a : Œ±) : Function.Injective (finiteCoproduct.Œπ Z a) := by
  intro x y hxy 
  exact eq_of_heq (Sigma.ext_iff.mp hxy).2

lemma finiteCoproduct.Œπ_jointly_surjective {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí CompHaus.{u}} 
    (R : finiteCoproduct Z) : ‚àÉ (a : Œ±) (r : Z a), R = finiteCoproduct.Œπ Z a r := by
  exact ‚ü®R.fst, R.snd, rfl‚ü©

lemma finiteCoproduct.Œπ_desc_apply {Œ± : Type} [Fintype Œ±] {X : CompHaus.{u}}
    {Z : Œ± ‚Üí CompHaus.{u}} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} (a : Œ±) : 
    ‚àÄ x, finiteCoproduct.desc Z œÄ (finiteCoproduct.Œπ Z a x) = œÄ a x := by
  intro x 
  change (Œπ Z a ‚â´ desc Z œÄ) _ = _ 
  simp only [Œπ_desc]

lemma finiteCoproduct.range_eq {Œ± : Type} [Fintype Œ±] {Z : Œ± ‚Üí CompHaus.{u}} 
    {a b : Œ±} (h : a = b) : Set.range (Œπ Z a) = Set.range (Œπ Z b) := by
  rw [h]

end FiniteCoproducts

section Pullbacks 

variable {X Y Z : CompHaus.{u}} (f : X ‚ü∂ Z) (i : Y ‚ü∂ Z) 

section Isos

noncomputable
def toExplicit : Limits.pullback f i ‚ü∂ CompHaus.pullback f i :=
  pullback.lift f i Limits.pullback.fst Limits.pullback.snd Limits.pullback.condition

noncomputable
def fromExplicit : CompHaus.pullback f i ‚ü∂ Limits.pullback f i :=
  Limits.pullback.lift (pullback.fst _ _) (pullback.snd _ _) (pullback.condition f i)

@[simp]
theorem toExplicitCompFromExcplict :
    (toExplicit f i ‚â´ fromExplicit f i) = ùüô _ := by
  refine' Limits.pullback.hom_ext (k := (toExplicit f i ‚â´ fromExplicit f i)) _ _
  ¬∑ simp [toExplicit, fromExplicit]
  ¬∑ rw [Category.id_comp, Category.assoc, fromExplicit, Limits.pullback.lift_snd,
      toExplicit, pullback.lift_snd]
    
@[simp]
theorem fromExcplictComptoExplicit :
    (fromExplicit f i ‚â´ toExplicit f i) = ùüô _ :=
  pullback.hom_ext f i _ _ (by simp [toExplicit, fromExplicit]) (by simp [toExplicit, fromExplicit])

@[simps]
noncomputable
def fromExplicitIso : CompHaus.pullback f i ‚âÖ Limits.pullback f i where
  hom := fromExplicit f i
  inv := toExplicit f i
  hom_inv_id := fromExcplictComptoExplicit f i
  inv_hom_id := toExplicitCompFromExcplict f i

end Isos

section Commutativity

theorem fst_comp_fromExplicit : 
    CompHaus.pullback.fst f i = fromExplicit f i ‚â´ Limits.pullback.fst := by  
  dsimp [fromExplicit] 
  simp only [limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app]

theorem snd_comp_fromExplicit : 
    CompHaus.pullback.snd f i = fromExplicit f i ‚â´ Limits.pullback.snd := by  
  dsimp [fromExplicit] 
  simp only [limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app]

end Commutativity

end Pullbacks 

end CompHaus