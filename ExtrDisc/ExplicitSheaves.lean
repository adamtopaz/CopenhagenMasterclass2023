import ExtrDisc.Basic
import ExtrDisc.Coherent
import Mathlib.CategoryTheory.Sites.Sheaf
import Sieves.isSheafForPullbackSieve
import Sieves.ExtensiveRegular
import Sieves.OpenEmbedding
import ExtrDisc.Pullback

universe u v

open CategoryTheory ExtrDisc Opposite CategoryTheory.Limits Functor Presieve

namespace CategoryTheory

open CategoryTheory.Limits

namespace ExtrDisc

lemma OpenEmbedding_of_Sigma_desc_Iso {Œ± : Type} [Fintype Œ±] {X : ExtrDisc.{u}}
    {Z : Œ± ‚Üí ExtrDisc.{u}} {i : (a : Œ±) ‚Üí Z a ‚ü∂ X} (HIso : IsIso (Sigma.desc i)) :
    ‚àÄ a, OpenEmbedding (i a) := by
  intro a
  have h‚ÇÅ : OpenEmbedding (Sigma.desc i) :=
    (ExtrDisc.homeoOfIso (asIso (Sigma.desc i))).openEmbedding
  have h‚ÇÇ : OpenEmbedding (Sigma.Œπ Z a) := openEmbedding_Œπ _ _
  have := OpenEmbedding.comp h‚ÇÅ h‚ÇÇ
  erw [‚Üê CategoryTheory.coe_comp (Sigma.Œπ Z a) (Sigma.desc i)] at this 
  simp only [colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app] at this 
  assumption

instance : HasPullbackOfIsIsodesc ExtrDisc := by
  constructor 
  intro X Z Œ± f Y i _ _ _ a 
  apply HasPullbackOpenEmbedding 
  apply OpenEmbedding_of_Sigma_desc_Iso inferInstance

lemma isIso_of_bijective {X Y : ExtrDisc.{u}} {f : X ‚ü∂ Y} (hf : Function.Bijective f) : IsIso f := by
  suffices IsIso <| toCompHaus.map f by
    ¬∑ apply isIso_of_fully_faithful toCompHaus
  exact CompHaus.isIso_of_bijective _ hf

lemma Extensivity_ExtrDisc_injective {Œ± : Type} [Fintype Œ±] {X : ExtrDisc.{u}}
    {Z : Œ± ‚Üí ExtrDisc.{u}} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {Y : ExtrDisc.{u}} (f : Y ‚ü∂ X)
    (HIso : IsIso (finiteCoproduct.desc _ œÄ)) (hOpen : ‚àÄ a, OpenEmbedding (œÄ a)) :
    Function.Injective (finiteCoproduct.desc _ ((fun a => pullback.fst f (hOpen a)))) := by
  let Œ∂ := finiteCoproduct.desc _ (fun a => pullback.snd f (hOpen a) ‚â´ finiteCoproduct.Œπ Z a )
  let Œ± := finiteCoproduct.desc _ ((fun a => pullback.fst f (hOpen a)))
  let Œ≤ := finiteCoproduct.desc _ œÄ
  have comm : Œ∂ ‚â´ Œ≤ = Œ± ‚â´ f := by
     refine' finiteCoproduct.hom_ext _ _ _ (fun a => _)
     simp [‚Üê Category.assoc, finiteCoproduct.Œπ_desc, pullback.condition]
  intro R‚ÇÅ R‚ÇÇ hR
  have himage : (Œ∂ ‚â´ Œ≤) R‚ÇÅ = (Œ∂ ‚â´ Œ≤) R‚ÇÇ := by
    rw [comm]; change f (Œ± R‚ÇÅ) = f (Œ± R‚ÇÇ); rw [hR]
  replace himage := congr_arg (inv Œ≤) himage
  change ((Œ∂ ‚â´ Œ≤ ‚â´ inv Œ≤) R‚ÇÅ) = ((Œ∂ ‚â´ Œ≤ ‚â´ inv Œ≤) R‚ÇÇ) at himage
  rw [IsIso.hom_inv_id, Category.comp_id] at himage
  have Hfst : R‚ÇÅ.fst = R‚ÇÇ.fst := by
    suffices (Œ∂ R‚ÇÅ).1 = R‚ÇÅ.1 ‚àß (Œ∂ R‚ÇÇ).1 = R‚ÇÇ.1 by
      ¬∑ rw [‚Üê this.1, ‚Üê this.2, himage]
    constructor <;> rfl
  exact Sigma.subtype_ext Hfst hR 

lemma Extensivity_ExtrDisc_explicit {Œ± : Type} [Fintype Œ±] {X : ExtrDisc.{u}}
    {Z : Œ± ‚Üí ExtrDisc.{u}} {œÄ : (a : Œ±) ‚Üí Z a ‚ü∂ X} {Y : ExtrDisc.{u}} (f : Y ‚ü∂ X)
    (HIso : IsIso (finiteCoproduct.desc _ œÄ)) (hOpen : ‚àÄ a, OpenEmbedding (œÄ a)) :
     IsIso (finiteCoproduct.desc _ ((fun a => pullback.fst f (hOpen a)))) := by
  let Œ≤ := finiteCoproduct.desc _ œÄ
  refine' isIso_of_bijective ‚ü®Extensivity_ExtrDisc_injective f HIso hOpen, fun y => _‚ü©
  refine' ‚ü®‚ü®(inv Œ≤ (f y)).1, ‚ü®y, (inv Œ≤ (f y)).2, _‚ü©‚ü©, rfl‚ü©
  have inj : Function.Injective (inv Œ≤) := by --this should be obvious
    intros r s hrs
    convert congr_arg Œ≤ hrs <;> change _ = (inv Œ≤ ‚â´ Œ≤) _<;> simp only [IsIso.inv_hom_id]<;> rfl  
  apply inj
  suffices ‚àÄ a, œÄ a ‚â´ inv Œ≤ = finiteCoproduct.Œπ _ a by
    ¬∑ change (_ ‚â´ inv Œ≤) _ = _
      rw [this]
      rfl
  intro a
  simp only [IsIso.comp_inv_eq, finiteCoproduct.Œπ_desc]

lemma Extensivity_ExtrDisc : Extensivity ExtrDisc := @fun Œ± _ X Z i Y f H => by
  have hOpen := OpenEmbedding_of_Sigma_desc_Iso H
  let Œ∏ := Sigma.mapIso (fun a => fromExplicitIso f (hOpen a))
  suffices IsIso (Œ∏.hom ‚â´ Sigma.desc fun x => Limits.pullback.fst) by
    ¬∑ apply IsIso.of_isIso_comp_left Œ∏.hom
  let Œ¥ := FromFiniteCoproductIso (fun a => (OpenEmbeddingCone f (hOpen a)).pt)
  suffices IsIso <| Œ¥.hom ‚â´ (Œ∏.hom ‚â´ Sigma.desc fun x => Limits.pullback.fst) by
    ¬∑ apply IsIso.of_isIso_comp_left Œ¥.hom
  have HIso : IsIso (finiteCoproduct.desc _ i) := by
    let Œµ := ToFiniteCoproductIso Z
    suffices IsIso <| Œµ.hom ‚â´ (finiteCoproduct.desc _ i) by
      ¬∑ apply IsIso.of_isIso_comp_left Œµ.hom 
    convert H
    refine' Sigma.hom_ext _ _ (fun a => _)
    simp [‚Üê Category.assoc]
  convert Extensivity_ExtrDisc_explicit f HIso hOpen
  refine' finiteCoproduct.hom_ext _ _ _ (fun a => _)
  simp [‚Üê Category.assoc, finiteCoproduct.Œπ_desc, fromExplicit]

lemma EverythingProj_ExtrDisc : EverythingIsProjective ExtrDisc := by
  refine' fun P => ‚ü®(@fun X Y f e he => _)‚ü©
  have proj : Projective (toCompHaus.obj P) := inferInstanceAs (Projective P.compHaus)
  have : Epi (toCompHaus.map e) := by --TODO state a general lemma
    rw [CompHaus.epi_iff_surjective]
    change Function.Surjective e
    rwa [‚Üê ExtrDisc.epi_iff_surjective]
  set g := toCompHaus.preimage <| Projective.factorThru (toCompHaus.map f) (toCompHaus.map e) with hg
  refine' ‚ü®g, toCompHaus.map_injective _‚ü©
  rw [map_comp, hg, image_preimage, Projective.factorThru_comp]

end ExtrDisc

end CategoryTheory

lemma one' : (ExtensiveRegularCoverage ExtrDisc EverythingProj_ExtrDisc
   Extensivity_ExtrDisc).toGrothendieck = 
    (coherentTopology ExtrDisc) := by
  ext X S  
  constructor
  <;> intro h 
  ¬∑ dsimp [Coverage.toGrothendieck] at *
    induction h with 
    | of Y T hT => 
      ¬∑ apply Coverage.saturate.of 
        dsimp [coherentCoverage]
        dsimp [ExtensiveRegularCoverage] at hT 
        apply Or.elim hT
        <;> intro h
        ¬∑ obtain ‚ü®Œ±, x, Xmap, œÄ, h‚ü© := h
          use Œ±
          use x
          use Xmap 
          use œÄ 
          refine' ‚ü®h.1,_‚ü©  
          have he := (effectiveEpiFamily_tfae Xmap œÄ).out 0 1
          rw [he]
          letI := h.2
          exact inferInstance
        ¬∑ obtain ‚ü®Z, f, h‚ü© := h
          use Unit
          use inferInstance 
          use (fun _ ‚Ü¶ Z) 
          use (fun _ ‚Ü¶ f)
          refine' ‚ü®h.1,_‚ü©  
          have he := (effectiveEpiFamily_tfae (fun (_ : Unit) ‚Ü¶ Z) (fun _ ‚Ü¶ f)).out 0 1
          rw [he] 
          rw [ExtrDisc.epi_iff_surjective _] at h ‚ä¢ 
          intro x 
          obtain ‚ü®y,hy‚ü© := h.2 x  
          use Sigma.Œπ (fun (_ : Unit) ‚Ü¶ Z) Unit.unit y 
          rw [‚Üê hy]
          suffices : (f : Z ‚Üí Y) = Sigma.Œπ (fun (_ : Unit) ‚Ü¶ Z) Unit.unit ‚â´ Sigma.desc (fun _ ‚Ü¶ f)
          ¬∑ rw [this]
            rfl
          simp only [colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app]        
    | top => 
      ¬∑ apply Coverage.saturate.top 
    | transitive Y T => 
      ¬∑ apply Coverage.saturate.transitive Y T
        ¬∑ assumption
        ¬∑ assumption  
  ¬∑ induction h with 
    | of Y T hT => 
      ¬∑ dsimp [coherentCoverage] at hT 
        obtain ‚ü®I, hI, Xmap, f, ‚ü®h, hT‚ü©‚ü© := hT     
        have he := (effectiveEpiFamily_tfae Xmap f).out 0 1
        rw [he] at hT 
        let œÜ := fun (i : I) ‚Ü¶ Sigma.Œπ Xmap i
        let F := Sigma.desc f
        let Z := Sieve.generate T
        let Xs := (‚àê fun (i : I) => Xmap i)
        let Zf : Sieve Y := Sieve.generate 
          (Presieve.ofArrows (fun (_ : Unit) ‚Ü¶ Xs) (fun (_ : Unit) ‚Ü¶ F)) 
        apply Coverage.saturate.transitive Y Zf
        ¬∑ apply Coverage.saturate.of 
          dsimp [ExtensiveRegularCoverage]
          simp only [Set.mem_union, Set.mem_setOf_eq]
          right
          use Xs 
          use F 
          refine' ‚ü®rfl, inferInstance‚ü©  
        ¬∑ intro R g hZfg 
          dsimp at hZfg 
          rw [Presieve.ofArrows_pUnit] at hZfg
          obtain ‚ü®W, œà, œÉ, ‚ü®hW, hW'‚ü©‚ü© := hZfg 
          dsimp [Presieve.singleton] at hW 
          induction hW
          rw [‚Üê hW', Sieve.pullback_comp Z]
          suffices : Sieve.pullback œà ((Sieve.pullback F) Z) ‚àà GrothendieckTopology.sieves
            (ExtensiveRegularCoverage _ _ _).toGrothendieck R 
          ¬∑ exact this 
          apply GrothendieckTopology.pullback_stable' 
          dsimp [Coverage.toGrothendieck]
          suffices : Coverage.saturate (ExtensiveRegularCoverage _ _ _) Xs (Z.pullback F)
          ¬∑ exact this
          suffices : Sieve.generate (Presieve.ofArrows Xmap œÜ) ‚â§ Z.pullback F
          ¬∑ apply Coverage.saturate_of_superset _ this
            apply Coverage.saturate.of 
            dsimp [ExtensiveRegularCoverage] 
            left
            refine' ‚ü®I, hI, Xmap, œÜ, ‚ü®rfl, _‚ü©‚ü© 
            suffices : Sigma.desc œÜ = ùüô _ 
            ¬∑ rw [this]
              exact inferInstance 
            ext 
            simp only [colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app, Category.comp_id]
          intro Q q hq 
          simp only [Sieve.pullback_apply, Sieve.generate_apply] 
          simp only [Sieve.generate_apply] at hq    
          obtain ‚ü®E, e, r, hq‚ü© := hq
          refine' ‚ü®E, e, r ‚â´ F, ‚ü®_, _‚ü©‚ü©  
          ¬∑ rw [h]
            induction hq.1
            dsimp 
            simp only [colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app]
            exact Presieve.ofArrows.mk _
          ¬∑ rw [‚Üê hq.2]
            rfl
    | top => 
      ¬∑ apply Coverage.saturate.top
    | transitive Y T => 
      ¬∑ apply Coverage.saturate.transitive Y T
        ¬∑ assumption
        ¬∑ assumption   

lemma isSheafForRegularSieve {X : ExtrDisc} {S : Presieve X} (hS : S ‚àà RegularSieve X)
    (F : ExtrDisc.{u}·µí·µñ ‚•§ Type (u+1)) : IsSheafFor F S := by
  obtain ‚ü®Y, f, rfl, hf‚ü© := hS
  have proj : Projective (toCompHaus.obj X) := inferInstanceAs (Projective X.compHaus)
  have : Epi (toCompHaus.map f) := by
    rw [CompHaus.epi_iff_surjective]
    change Function.Surjective f
    rwa [‚Üê ExtrDisc.epi_iff_surjective]
  set g := toCompHaus.preimage <| Projective.factorThru (ùüô _) (toCompHaus.map f) with hg
  have hfg : g ‚â´ f = ùüô _ := by
    refine' toCompHaus.map_injective _
    rw [map_comp, hg, image_preimage, Projective.factorThru_comp, CategoryTheory.Functor.map_id]
  intro y hy
  refine' ‚ü®F.map g.op <| y f <| ofArrows.mk (), fun Z h hZ => _, fun z hz => _‚ü©
  ¬∑ cases' hZ with u
    have := hy (f‚ÇÅ := f) (f‚ÇÇ := f) (ùüô Y) (f ‚â´ g) (ofArrows.mk ()) (ofArrows.mk ()) ?_
    ¬∑ rw [op_id, F.map_id, types_id_apply] at this
      rw [‚Üê types_comp_apply (F.map g.op) (F.map f.op), ‚Üê F.map_comp, ‚Üê op_comp]
      exact this.symm
    ¬∑ rw [Category.id_comp, Category.assoc, hfg, Category.comp_id]
  ¬∑ have := congr_arg (F.map g.op) <| hz f (ofArrows.mk ())
    rwa [‚Üê types_comp_apply (F.map f.op) (F.map g.op), ‚Üê F.map_comp, ‚Üê op_comp, hfg, op_id,
      F.map_id, types_id_apply] at this

lemma isSheafFor_of_extensiveRegular {X : ExtrDisc} {S : Presieve X}
  (hS : S ‚àà (ExtensiveRegularCoverage ExtrDisc EverythinProj_ExtrDisc
    Extensivity_ExtrDisc).covering X)
  {F : ExtrDisc.{u}·µí·µñ ‚•§ Type (u+1)} (hF : PreservesFiniteProducts F) : S.IsSheafFor F := by
  cases' hS with hSIso hSSingle
  ¬∑ exact isSheafForExtensiveSieve hSIso hF
  ¬∑ exact isSheafForRegularSieve hSSingle F

theorem final (A : Type (u+2)) [Category.{u+1} A] {F : ExtrDisc.{u}·µí·µñ ‚•§ A}
    (hF : PreservesFiniteProducts F) : Presheaf.IsSheaf (coherentTopology ExtrDisc) F := by
  rw [‚Üê one']
  exact fun E => (Presieve.isSheaf_coverage _ _).2 <| fun S hS => isSheafFor_of_extensiveRegular hS
    ‚ü®fun J inst => have := hF.1; compPreservesLimitsOfShape _ _‚ü©