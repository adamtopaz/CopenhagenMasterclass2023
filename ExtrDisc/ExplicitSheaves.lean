import ExtrDisc.Basic
import Sieves.dagur
import Sieves.isSheafForPullbackSieve
import Mathlib.CategoryTheory.Sites.Sheaf
import ExtrDisc.Coherent


universe u v

open CategoryTheory ExtrDisc Opposite CategoryTheory.Limits

variable (C : Type _) [Category C] 

class HasPullbackOfRightMono : Prop where
  HasPullback_of_mono : ‚àÄ (X Y Z : C) (f : X ‚ü∂ Z) {i : Y ‚ü∂ Z} (_ : CategoryTheory.Mono i),
    HasPullback f i

variable [Precoherent C] [HasFiniteCoproducts C]

def DagurSieveIso (B : C) := { S | ‚àÉ (Œ± : Type) (_ : Fintype Œ±) (X : Œ± ‚Üí C) (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B)),
    S = Presieve.ofArrows X œÄ ‚àß IsIso (Sigma.desc œÄ) }

def DagurSieveSingle (B : C) := { S | ‚àÉ (X : C) (f : X ‚ü∂ B), S = Presieve.ofArrows (fun (_ : Unit) ‚Ü¶ X)
      (fun (_ : Unit) ‚Ü¶ f) ‚àß Epi f }


def dagurCoverage [HasPullbackOfRightMono C] : Coverage C where
  -- covering B := 
    -- { S | ‚àÉ (Œ± : Type) (_ : Fintype Œ±) (X : Œ± ‚Üí C) (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B)),
    -- S = Presieve.ofArrows X œÄ ‚àß IsIso (Sigma.desc œÄ) } ‚à™
    -- { S | ‚àÉ (X : C) (f : X ‚ü∂ B), S = Presieve.ofArrows (fun (_ : Unit) ‚Ü¶ X) 
    --   (fun (_ : Unit) ‚Ü¶ f) ‚àß Epi f }
  covering B :=   (DagurSieveIso C B) ‚à™ (DagurSieveSingle C B)
  pullback := by
    rintro X Y f S (‚ü®Œ±, hŒ±, Z, œÄ, hS, h_iso‚ü© | ‚ü®Z, œÄ, hœÄ, h_epi‚ü©)
    ¬∑ set S' := @Presieve.ofArrows C _ Y Unit _ (fun (_ : Unit) ‚Ü¶ (ùüô Y)) with hS'
      use S'
      rw [Set.mem_union]
      constructor
      ¬∑ apply Or.intro_right
        simp only [Set.mem_setOf_eq]
        exact ‚ü®Y, ùüô _, hS', instEpiIdToCategoryStruct _‚ü©
      ¬∑ rw [hS', Presieve.FactorsThruAlong]
        intro W g hg
        rw [Presieve.ofArrows_pUnit] at hg
        induction hg
        simp only [Category.id_comp]
        use sigmaObj Z
        let e := Sigma.desc œÄ
        use f ‚â´ (CategoryTheory.inv e)
        use e
        constructor
        ¬∑ rw [hS]
          -- convert @Presieve.ofArrows.mk C _ X _ Z œÄ
          sorry
        ¬∑ simp only [Category.assoc, IsIso.inv_hom_id, Category.comp_id]
    sorry


lemma one : (dagurCoverage ExtrDisc).toDCoverage = (coherentCoverage ExtrDisc).toDCoverage := by
  ext X S  
  dsimp [dagurCoverage, coherentCoverage, Coverage.toDCoverage] 
  constructor
  <;> intro h 
  <;> obtain ‚ü®T,‚ü®h,hT‚ü©‚ü© := h 
  ¬∑ use T 
    refine' ‚ü®_, by assumption‚ü©  
    simp only [Set.mem_union, Set.mem_setOf_eq] at h 
    apply Or.elim h 
    <;> intro h
    ¬∑ obtain ‚ü®Œ±, x, Xmap, œÄ, h‚ü© := h
      use Œ±
      use x
      use Xmap 
      use œÄ 
      refine' ‚ü®h.1,_‚ü©  
      have he := (effectiveEpiFamily_tfae Xmap œÄ).out 0 1
      rw [he]
      letI := h.2
      exact inferInstance
    ¬∑ obtain ‚ü®Y, f, h‚ü© := h
      use Unit
      use inferInstance 
      use (fun _ ‚Ü¶ Y) 
      use (fun _ ‚Ü¶ f)
      refine' ‚ü®h.1,_‚ü©  
      have he := (effectiveEpiFamily_tfae (fun (_ : Unit) ‚Ü¶ Y) (fun _ ‚Ü¶ f)).out 0 1
      rw [he] 
      rw [ExtrDisc.epi_iff_surjective _] at h ‚ä¢ 
      intro x 
      obtain ‚ü®y,hy‚ü© := h.2 x  
      use Sigma.Œπ (fun (_ : Unit) ‚Ü¶ Y) Unit.unit y 
      rw [‚Üê hy]
      suffices : (f : Y ‚Üí X) = Sigma.Œπ (fun (_ : Unit) ‚Ü¶ Y) Unit.unit ‚â´ Sigma.desc (fun _ ‚Ü¶ f)
      ¬∑ rw [this]
        rfl
      simp only [colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app]        
  ¬∑ sorry

lemma one' : (dagurCoverage ExtrDisc).toGrothendieck = 
    (coherentCoverage ExtrDisc).toGrothendieck := by
  ext X S  
  constructor
  <;> intro h 
  ¬∑ dsimp [Coverage.toGrothendieck] at *
    induction h with 
    | of Y T hT => 
      ¬∑ apply Coverage.saturate.of 
        dsimp [coherentCoverage]
        dsimp [dagurCoverage] at hT 
        apply Or.elim hT
        <;> intro h
        ¬∑ obtain ‚ü®Œ±, x, Xmap, œÄ, h‚ü© := h
          use Œ±
          use x
          use Xmap 
          use œÄ 
          refine' ‚ü®h.1,_‚ü©  
          have he := (effectiveEpiFamily_tfae Xmap œÄ).out 0 1
          rw [he]
          letI := h.2
          exact inferInstance
        ¬∑ obtain ‚ü®Z, f, h‚ü© := h
          use Unit
          use inferInstance 
          use (fun _ ‚Ü¶ Z) 
          use (fun _ ‚Ü¶ f)
          refine' ‚ü®h.1,_‚ü©  
          have he := (effectiveEpiFamily_tfae (fun (_ : Unit) ‚Ü¶ Z) (fun _ ‚Ü¶ f)).out 0 1
          rw [he] 
          rw [ExtrDisc.epi_iff_surjective _] at h ‚ä¢ 
          intro x 
          obtain ‚ü®y,hy‚ü© := h.2 x  
          use Sigma.Œπ (fun (_ : Unit) ‚Ü¶ Z) Unit.unit y 
          rw [‚Üê hy]
          suffices : (f : Z ‚Üí Y) = Sigma.Œπ (fun (_ : Unit) ‚Ü¶ Z) Unit.unit ‚â´ Sigma.desc (fun _ ‚Ü¶ f)
          ¬∑ rw [this]
            rfl
          simp only [colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app]        
    | top Y => 
      ¬∑ apply Coverage.saturate.top 
    | transitive Y T => 
      ¬∑ apply Coverage.saturate.transitive Y T
        ¬∑ assumption
        ¬∑ assumption  
  ¬∑ induction h with 
    | of Y T hT => 
      ¬∑ sorry    
    | top Y => 
      ¬∑ apply Coverage.saturate.top
    | transitive Y T => 
      ¬∑ apply Coverage.saturate.transitive Y T
        ¬∑ assumption
        ¬∑ assumption   

lemma isPullbackSieve_DagurCoverage (X : C) (S : Presieve X)
  (hS : S ‚àà (dagurCoverage C).covering X) : isPullbackPresieve S := sorry

lemma two (F : DCoverage C) : F.toCoverage.toDCoverage = F := sorry

lemma three (F : Coverage C) : F.toGrothendieck = F.toDCoverage.toCoverage.toGrothendieck := sorry

def e {X : ExtrDisc} (F : ExtrDisc.{u}·µí·µñ ‚•§ Type (u+1)) (S : Presieve X) : 
    F.obj (op X) ‚ü∂ (‚àÄ (Y : ExtrDisc) (s : Y ‚ü∂ X) (_ : S s), F.obj (op Y)) := 
  fun x _ s _ ‚Ü¶ F.map s.op x 

noncomputable
def p‚ÇÅ {X : ExtrDisc} (F : ExtrDisc.{u}·µí·µñ ‚•§ Type (u+1)) (S : Presieve X)
    (hS : ‚àÄ {Y : ExtrDisc} (s : Y ‚ü∂ X) {Z : ExtrDisc} (s' : Z ‚ü∂ X), 
    S s ‚Üí S s' ‚Üí HasPullback s s') : 
    (‚àÄ (Y : ExtrDisc) (s : Y ‚ü∂ X) (_ : S s), F.obj (op Y)) ‚ü∂ 
    (‚àÄ (Y : ExtrDisc) (s : Y ‚ü∂ X) (hs : S s) (Z : ExtrDisc) (s' : Z ‚ü∂ X) (hs' : S s'), 
    F.obj (op (@Limits.pullback _ _ _ _ _ s s' (hS s s' hs hs')))) := 
  fun x Y s hs _ s' hs' ‚Ü¶ 
  F.map (@pullback.fst _ _ _ _ _ s s' (hS s s' hs hs')).op (x Y s hs)

noncomputable
def p‚ÇÇ {X : ExtrDisc} (F : ExtrDisc.{u}·µí·µñ ‚•§ Type (u+1)) (S : Presieve X)
    (hS : ‚àÄ {Y : ExtrDisc} (s : Y ‚ü∂ X) {Z : ExtrDisc} (s' : Z ‚ü∂ X), 
    S s ‚Üí S s' ‚Üí HasPullback s s') : 
    (‚àÄ (Y : ExtrDisc) (s : Y ‚ü∂ X) (_ : S s), F.obj (op Y)) ‚ü∂ 
    (‚àÄ (Y : ExtrDisc) (s : Y ‚ü∂ X) (hs : S s) (Z : ExtrDisc) (s' : Z ‚ü∂ X) (hs' : S s'), 
    F.obj (op (@Limits.pullback _ _ _ _ _ s s' (hS s s' hs hs')))) := 
  fun x _ s hs Z s' hs' ‚Ü¶ 
  F.map (@pullback.snd _ _ _ _ _ s s' (hS s s' hs hs')).op (x Z s' hs')

def IsEqualizerDiagram_vi_to_sheaf {X : ExtrDisc} (F : ExtrDisc.{u}·µí·µñ ‚•§ Type (u+1)) 
    (S : Presieve X) (hS : ‚àÄ {Y : ExtrDisc} (s : Y ‚ü∂ X) {Z : ExtrDisc} (s' : Z ‚ü∂ X), 
    S s ‚Üí S s' ‚Üí HasPullback s s') : Prop := 
  ‚àÄ y, (p‚ÇÅ F S hS) y = (p‚ÇÇ F S hS) y ‚Üí ‚àÉ! x, (e F S) x = y 
  
lemma dagur115_vi_to_sheaf {X : ExtrDisc} (F : ExtrDisc·µí·µñ ‚•§ Type _) (S : Presieve X)
    (hS : ‚àÄ {Y : ExtrDisc} (s : Y ‚ü∂ X) {Z : ExtrDisc} (s' : Z ‚ü∂ X), 
    S s ‚Üí S s' ‚Üí HasPullback s s') : 
    IsEqualizerDiagram_vi_to_sheaf F S hS ‚Üî S.IsSheafFor F := by
  constructor
  <;> intro h
  ¬∑ -- rw [CategoryTheory.Presieve.isSheafFor_iff_generate]
    dsimp [Presieve.IsSheafFor]
    intro T hT 
    dsimp [Presieve.FamilyOfElements.IsAmalgamation]
    dsimp [IsEqualizerDiagram_vi_to_sheaf] at h
    dsimp [Presieve.FamilyOfElements] at T 
    specialize h T
    dsimp [p‚ÇÅ, p‚ÇÇ, e] at h 
    suffices : ‚àÉ! x, (fun _ s _ ‚Ü¶ F.map s.op x) = T 
    ¬∑ obtain ‚ü®x, h‚ü© := this 
      apply ExistsUnique.intro x _ _
      ¬∑ dsimp at h 
        rw [‚Üê h.1] 
        intro Y f hf
        rfl
      ¬∑ intro y 
        have h' := h.2 y 
        intro _
        apply h' 
        dsimp at h 
        rw [‚Üê h.1]
        ext
        sorry
    apply h 
    ext Y f hf Z g hg
    dsimp [Presieve.FamilyOfElements.Compatible] at hT
    letI := hS f g hf hg  
    apply hT pullback.fst pullback.snd hf hg  
    exact pullback.condition
  ¬∑ sorry


lemma is_Dagur_Presieve_iff (X : C) (S : Presieve X)
  (hS : S ‚àà (dagurCoverage C).covering X) : ( ‚àÉ (Œ± : Type) (_ : Fintype Œ±) (Z : Œ± ‚Üí C)
    (œÄ : (a : Œ±) ‚Üí (Z a ‚ü∂ X)),
    S = Presieve.ofArrows Z œÄ ‚àß IsIso (Sigma.desc œÄ))
   ‚à® (‚àÉ (Z : C) (f : Z ‚ü∂ X), S = Presieve.ofArrows (fun (_ : Unit) ‚Ü¶ Z) 
      (fun (_ : Unit) ‚Ü¶ f) ‚àß Epi f) := by
    rcases hS with (H | H)
    ¬∑ apply Or.intro_left
      exact H
    ¬∑ apply Or.intro_right
      exact H 


lemma isSheafFor_of_Dagur (X : ExtrDisc) (S : Presieve X)
  (hS : S ‚àà (dagurCoverage ExtrDisc.{u}).covering X)
  (F : ExtrDisc.{u}·µí·µñ ‚•§ Type (u+1)) (hF : PreservesFiniteProducts F) : S.IsSheafFor F := by
  rcases (is_Dagur_Presieve_iff ExtrDisc X S hS) with H | H
  ¬∑ have : isPullbackPresieve S := (isPullbackSieve_DagurCoverage ExtrDisc X S hS)
    replace this := (Equalizer.Presieve.sheaf_condition' F this).mpr
    apply this
    sorry
  ¬∑ sorry


lemma final (A : Type u) [Category A] [HasLimits A] (s : A ‚•§ Type (u+1)) [PreservesLimits s]
    [ReflectsIsomorphisms s] (F : ExtrDisc·µí·µñ ‚•§ A) (hF : PreservesFiniteProducts F) : 
    Presheaf.IsSheaf (coherentTopology ExtrDisc) F := by
  rw [CategoryTheory.Presheaf.IsSheaf]--, Presheaf.isLimit_iff_isSheafFor]
