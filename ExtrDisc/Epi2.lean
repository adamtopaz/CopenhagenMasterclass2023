import ExtrDisc.Basic
import Mathlib.Topology.Category.CompHaus.EffectiveEpi

import Mathlib.Topology.Category.Profinite.Basic
import Mathlib.CategoryTheory.Sites.Coherent
import Mathlib.Topology.Category.CompHaus.ExplicitLimits
--import Mathlib.Topology.Category.CompHaus.EffectiveEpi


import Profinite.Epi

open CategoryTheory Limits

namespace ExtrDisc

universe u

-- For mathlib?
/-- Construct a term of `Profinite` from a type endowed with the structure of a
compact, Hausdorff and totally disconnected topological space.
-/
def of (X : Type _) [TopologicalSpace X] [CompactSpace X] [T2Space X]
    [ExtremallyDisconnected X] : ExtrDisc :=
  ‚ü®‚ü®‚ü®X, inferInstance‚ü©‚ü©‚ü©

-- -- For mathlib?
instance {œÄ : Œπ ‚Üí Type _} [‚àÄ i, TopologicalSpace (œÄ i)] [‚àÄ i, ExtremallyDisconnected (œÄ i)] :
    ExtremallyDisconnected (Œ£i, œÄ i) := by
  sorry
--   refine ‚ü®fun s hs‚ÇÅ hs‚ÇÇ ‚ü®a, hs‚ÇÉ‚ü©  => ?_‚ü©
--   simp at hs‚ÇÉ

--   obtain rfl | h := s.eq_empty_or_nonempty
--   ¬∑ sorry -- exact Set.subsingleton_empty
--   ¬∑ obtain ‚ü®a, t, ht, rfl‚ü© := Sigma.isConnected_iff.1 ‚ü®h, hs‚ü©
--     exact ht.isPreconnected.subsingleton.image _



/-!
TODO

This section is copied from
`Mathlib/Topology/Category/CompHaus/ExplicitLimits.lean`
-/
section FiniteCoproducts

variable {Œ± : Type} [Fintype Œ±] (X : Œ± ‚Üí ExtrDisc.{u})

/--
The coproduct of a finite family of objects in `ExtrDisc`, constructed as the disjoint
union with its usual topology.
-/
def finiteCoproduct : ExtrDisc := ExtrDisc.of <| Œ£ (a : Œ±), X a

/--
The inclusion of one of the factors into the explicit finite coproduct.
-/
def finiteCoproduct.Œπ (a : Œ±) : X a ‚ü∂ finiteCoproduct X where
  toFun := fun x => ‚ü®a,x‚ü©
  continuous_toFun := continuous_sigmaMk (œÉ := fun a => X a)

/--
To construct a morphism from the explicit finite coproduct, it suffices to
specify a morphism from each of its factors.
This is essentially the universal property of the coproduct.
-/
def finiteCoproduct.desc {B : ExtrDisc.{u}} (e : (a : Œ±) ‚Üí (X a ‚ü∂ B)) :
    finiteCoproduct X ‚ü∂ B where
  toFun := fun ‚ü®a,x‚ü© => e a x
  continuous_toFun := by
    apply continuous_sigma
    intro a ; exact (e a).continuous

@[reassoc (attr := simp)]
lemma finiteCoproduct.Œπ_desc {B : ExtrDisc.{u}} (e : (a : Œ±) ‚Üí (X a ‚ü∂ B)) (a : Œ±) :
  finiteCoproduct.Œπ X a ‚â´ finiteCoproduct.desc X e = e a := rfl

lemma finiteCoproduct.hom_ext {B : ExtrDisc.{u}} (f g : finiteCoproduct X ‚ü∂ B)
    (h : ‚àÄ a : Œ±, finiteCoproduct.Œπ X a ‚â´ f = finiteCoproduct.Œπ X a ‚â´ g) : f = g := by
  ext ‚ü®a,x‚ü©
  specialize h a
  apply_fun (fun q => q x) at h
  exact h

/--
The coproduct cocone associated to the explicit finite coproduct.
-/
@[simps]
def finiteCoproduct.cocone : Limits.Cocone (Discrete.functor X) where
  pt := finiteCoproduct X
  Œπ := Discrete.natTrans fun ‚ü®a‚ü© => finiteCoproduct.Œπ X a

/--
The explicit finite coproduct cocone is a colimit cocone.
-/
@[simps]
def finiteCoproduct.isColimit : Limits.IsColimit (finiteCoproduct.cocone X) where
  desc := fun s => finiteCoproduct.desc _ fun a => s.Œπ.app ‚ü®a‚ü©
  fac := fun s ‚ü®a‚ü© => finiteCoproduct.Œπ_desc _ _ _
  uniq := fun s m hm => finiteCoproduct.hom_ext _ _ _ fun a => by
    specialize hm ‚ü®a‚ü©
    ext t
    apply_fun (fun q => q t) at hm
    exact hm

end FiniteCoproducts


-- Pullback will not work!

-- variable {X Y B : ExtrDisc.{u}} (f : X ‚ü∂ B) (g : Y ‚ü∂ B)
--
-- /--
-- The pullback of two morphisms `f, g` in `ExtrDisc`, constructed explicitly as the set of
-- pairs `(x,y)` such that `f x = g y`, with the topology induced by the product.
-- -/
-- def pullback : ExtrDisc.{u} :=
--   let set := { xy : X √ó Y | f xy.fst = g xy.snd }
--   have : CompactSpace set := by
--     rw [‚Üê isCompact_iff_compactSpace]
--     apply IsClosed.isCompact
--     exact isClosed_eq (f.continuous.comp continuous_fst) (g.continuous.comp continuous_snd)
--   ExtrDisc.of set
--
-- /--
-- The projection from the pullback to the first component.
-- -/
-- def pullback.fst : pullback f g ‚ü∂ X where
--   toFun := fun ‚ü®‚ü®x,_‚ü©,_‚ü© => x
--   continuous_toFun := Continuous.comp continuous_fst continuous_subtype_val
--
-- /--
-- The projection from the pullback to the second component.
-- -/
-- def pullback.snd : pullback f g ‚ü∂ Y where
--   toFun := fun ‚ü®‚ü®_,y‚ü©,_‚ü© => y
--   continuous_toFun := Continuous.comp continuous_snd continuous_subtype_val

namespace EffectiveEpiFamily

variable {Œ± : Type} [Fintype Œ±] {B : ExtrDisc.{u}}
  {X : Œ± ‚Üí ExtrDisc.{u}} (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B))
  (surj : ‚àÄ b : B, ‚àÉ (a : Œ±) (x : X a), œÄ a x = b)

/--
Implementation: This is a setoid on the explicit finite coproduct of `X` whose quotient
will be isomorphic to `B` provided that `X a ‚Üí B` is an effective epi family.
-/
def relation : Setoid (finiteCoproduct X) where
  r a b := ‚àÉ (Z : ExtrDisc.{u}) (z : Z)
    (fst : Z ‚ü∂ X a.fst) (snd : Z ‚ü∂ X b.fst),
    fst ‚â´ œÄ _ = snd ‚â´ œÄ _ ‚àß fst z = a.snd ‚àß snd z = b.snd
  iseqv := by
    constructor
    ¬∑ rintro ‚ü®a,x‚ü©
      refine ‚ü®X a, x, ùüô _, ùüô _, by simp, rfl, rfl‚ü©
    ¬∑ rintro ‚ü®a,x‚ü© ‚ü®b,y‚ü© ‚ü®Z,z,fst,snd,w,h1,h2‚ü©
      exact ‚ü®Z,z,snd,fst,w.symm,h2,h1‚ü©
    ¬∑ rintro ‚ü®a,x‚ü© ‚ü®b,y‚ü© ‚ü®z,c‚ü© ‚ü®Z, z,fstZ,sndZ,hZ,hZ1,hZ2‚ü©
      rintro ‚ü®W,w,fstW,sndW,hW,hW1,hW2‚ü©
      refine ‚ü®pullback sndZ fstW, ‚ü®‚ü®z,w‚ü©, by dsimp; rw [hZ2, hW1]‚ü©,
       pullback.fst _ _ ‚â´ fstZ, pullback.snd _ _ ‚â´ sndW, ?_, hZ1, hW2‚ü©
      dsimp at *
      simp only [Category.assoc, hZ, ‚Üê hW]
      apply ContinuousMap.ext
      rintro ‚ü®‚ü®u,v‚ü©,h‚ü©
      change œÄ b (sndZ u) = œÄ b (fstW v)
      rw [h]

/--
Implementation: the map from the quotient of `relation œÄ` to `B`, which will eventually
become the function underlying an isomorphism, provided that `X a ‚Üí B` is an effective epi family.
-/
def ŒπFun : Quotient (relation œÄ) ‚Üí B :=
  Quotient.lift (fun ‚ü®a,x‚ü© => œÄ a x) <| by
    rintro ‚ü®a,x‚ü© ‚ü®b,y‚ü© ‚ü®Z,z,fst,snd,h,hx,hy‚ü©
    dsimp at *
    rw [‚Üê hx, ‚Üê hy]
    apply_fun (fun t => t z) at h
    exact h

lemma ŒπFun_continuous : Continuous (ŒπFun œÄ) := by
  apply Continuous.quotient_lift
  apply continuous_sigma
  intro a
  exact (œÄ a).continuous

lemma ŒπFun_injective : (ŒπFun œÄ).Injective := by
  rintro ‚ü®‚ü®a,x‚ü©‚ü© ‚ü®‚ü®b,y‚ü©‚ü© (h : œÄ _ _ = œÄ _ _)
  apply Quotient.sound'
  refine ‚ü®pullback (œÄ a) (œÄ b), ‚ü®‚ü®x,y‚ü©,h‚ü©, pullback.fst _ _, pullback.snd _ _, ?_, rfl, rfl‚ü©
  ext ‚ü®_, h‚ü© ; exact h

lemma ŒπFun_surjective : (ŒπFun œÄ).Surjective := by
  intro b
  obtain ‚ü®a,x,h‚ü© := surj b
  refine ‚ü®Quotient.mk _ ‚ü®a,x‚ü©, h‚ü©

lemma ŒπFun_bijective : (ŒπFun œÄ).Bijective := ‚ü®ŒπFun_injective œÄ, ŒπFun_surjective œÄ surj‚ü©

/--
Implementation: The quotient of `relation œÄ`, considered as an object of `CompHaus`.
-/
def QB‚ÇÅ : CompHaus.{u} :=
  haveI : T2Space (Quotient <| relation œÄ) :=
    ‚ü®fun _ _ h => separated_by_continuous (ŒπFun_continuous œÄ) <| (ŒπFun_injective œÄ).ne h ‚ü©
  CompHaus.of (Quotient <| relation œÄ)

/-- The function `Œπ_fun`, considered as a morphism. -/
def Œπ‚ÇÅHom : (QB‚ÇÅ œÄ) ‚ü∂ B.toCompHaus := ‚ü®ŒπFun œÄ, ŒπFun_continuous œÄ‚ü©

/--
Implementation: The promised isomorphism between `QB` and `B`.
-/
noncomputable
def Œπ‚ÇÅIso : (QB‚ÇÅ œÄ) ‚âÖ B.toCompHaus :=
  have : IsIso (Œπ‚ÇÅHom œÄ) := by
    apply CompHaus.isIso_of_bijective
    refine ‚ü®ŒπFun_injective _, ?_‚ü©
    intro b
    obtain ‚ü®a,x,h‚ü© := surj b
    refine ‚ü®Quotient.mk _ ‚ü®a,x‚ü©, h‚ü©
  asIso (Œπ‚ÇÅHom œÄ)

lemma isOpen_iso {X Y : TopCat} {U : Set X} (f : X ‚âÖ Y) (h : IsOpen U) : IsOpen (f.hom '' U) := by
  let ff := TopCat.homeoOfIso f
  rw [‚Üê Homeomorph.isOpen_image ff] at h
  assumption

lemma _root_.TotallyDisconnectedSpace_ofIsIso
    {X Y : TopCat} [k : TotallyDisconnectedSpace X] (f : X ‚âÖ Y) :
    TotallyDisconnectedSpace Y := by

  have surj' : Function.Surjective f.hom
  ¬∑ apply (TopCat.homeoOfIso f).surjective

  have inj' : Function.Injective f.hom
  ¬∑ apply (TopCat.homeoOfIso f).injective

  constructor
  unfold _root_.IsTotallyDisconnected
  intro t _ ht‚ÇÇ

  apply Set.subsingleton_of_preimage surj'

  replace k := k.isTotallyDisconnected_univ
  unfold _root_.IsTotallyDisconnected at k

  apply k

  tauto

  apply IsPreconnected.preimage_of_open_map
  assumption
  assumption
  ¬∑ unfold IsOpenMap
    intro U hU
    apply isOpen_iso _ hU
  tauto

lemma CompHaus.TotallyDisconnectedSpace_ofIsIso
    {X Y : CompHaus} [k : TotallyDisconnectedSpace X] (f : X ‚âÖ Y) :
    TotallyDisconnectedSpace Y := by
  have f : X.toTop ‚âÖ Y.toTop
  ¬∑ exact compHausToTop.mapIso f
  apply _root_.TotallyDisconnectedSpace_ofIsIso f

lemma ExtrDisc.TotallyDisconnectedSpace_ofIsIso
    {X Y : CompHaus} [k : TotallyDisconnectedSpace X] (f : X ‚âÖ Y) :
    TotallyDisconnectedSpace Y := by
  have f : X.toTop ‚âÖ Y.toTop
  ¬∑ exact compHausToTop.mapIso f
  apply _root_.TotallyDisconnectedSpace_ofIsIso f

lemma QB‚ÇÅ_totallyDisconnectedSpace : TotallyDisconnectedSpace (QB‚ÇÅ œÄ) :=
  CompHaus.TotallyDisconnectedSpace_ofIsIso (Œπ‚ÇÅIso œÄ surj).symm

/--
Implementation: The quotient of `relation œÄ`, considered as an object of `ExtrDisc`.
-/
def QB‚ÇÇ : ExtrDisc.{u} where
  toCompHaus := QB‚ÇÅ œÄ
  IsTotallyDisconnected := QB‚ÇÅ_totallyDisconnectedSpace œÄ surj

/-- The function `Œπ_fun`, considered as a morphism. -/
def Œπ‚ÇÇHom : (QB‚ÇÇ œÄ surj) ‚ü∂ B := ‚ü®ŒπFun œÄ, ŒπFun_continuous œÄ‚ü©

/--
Implementation: The promised isomorphism between `QB` and `B`.
-/
noncomputable
def Œπ‚ÇÇIso : (QB‚ÇÇ œÄ surj) ‚âÖ B :=
  have : IsIso (Œπ‚ÇÇHom œÄ surj) := by
    apply ExtrDisc.isIso_of_bijective
    refine ‚ü®ŒπFun_injective _, ?_‚ü©
    intro b
    obtain ‚ü®a,x,h‚ü© := surj b
    refine ‚ü®Quotient.mk _ ‚ü®a,x‚ü©, h‚ü©
  asIso (Œπ‚ÇÇHom œÄ surj)

/--
Implementation: The family of morphisms `X a ‚ü∂ QB` which will be shown to be effective epi.
-/
def œÄ' : (a : Œ±) ‚Üí (X a ‚ü∂ QB‚ÇÇ œÄ surj) := fun a =>
  { toFun := fun x => Quotient.mk _ ‚ü®a, x‚ü©
    continuous_toFun := by
      apply Continuous.comp
      apply continuous_quot_mk
      apply continuous_sigmaMk (œÉ := fun a => X a) }

/--
Implementation: The family of morphisms `X a ‚ü∂ QB` is an effective epi.
-/
def structAux : EffectiveEpiFamilyStruct X (œÄ' œÄ surj) where
  desc := fun {W} e h => {
    toFun := Quotient.lift (fun ‚ü®a,x‚ü© => e a x) <| by
      rintro ‚ü®a,x‚ü© ‚ü®b,y‚ü© ‚ü®Z,z,fst,snd,hh,hx,hy‚ü©
      dsimp at *
      rw [‚Üê hx, ‚Üê hy]
      specialize h _ _ fst snd ?_
      ¬∑ ext z
        apply ŒπFun_injective
        apply_fun (fun q => q z) at hh
        exact hh
      apply_fun (fun q => q z) at h
      exact h
    continuous_toFun := by
      apply Continuous.quotient_lift
      apply continuous_sigma
      intro a
      exact (e a).continuous }
  fac := by intro Z e h a ; ext ; rfl
  uniq := by
    intro Z e h m hm
    ext ‚ü®‚ü®a,x‚ü©‚ü©
    specialize hm a
    apply_fun (fun q => q x) at hm
    exact hm

@[reassoc]
lemma œÄ'_comp_Œπ_hom (a : Œ±) : œÄ' œÄ surj a ‚â´ (Œπ‚ÇÇIso œÄ surj).hom = œÄ a := by ext ; rfl

@[reassoc]
lemma œÄ_comp_Œπ_inv (a : Œ±) : œÄ a ‚â´ (Œπ‚ÇÇIso œÄ surj).inv = œÄ' œÄ surj a :=  by
  rw [Iso.comp_inv_eq]
  exact œÄ'_comp_Œπ_hom _ surj _

/--
Implementation: The family `X` is an effective epi, provided that `œÄ` are jointly surjective.
The theorem `ExtrDisc.effectiveEpiFamily_tfae` should be used instead.
-/
noncomputable
def struct : EffectiveEpiFamilyStruct X œÄ where
  desc := fun {W} e h => (Œπ‚ÇÇIso œÄ surj).inv ‚â´ (structAux œÄ surj).desc e (fun {Z} a‚ÇÅ a‚ÇÇ g‚ÇÅ g‚ÇÇ hh => by
      apply h
      rw [‚Üê cancel_mono (Œπ‚ÇÇIso _ surj).inv]
      simpa only [Category.assoc, œÄ_comp_Œπ_inv])
  fac := by
    intro W e h a
    simp only [Eq.ndrec, id_eq, eq_mpr_eq_cast, œÄ_comp_Œπ_inv_assoc, (structAux œÄ surj).fac]
  uniq := by
    intro W e h m hm
    dsimp
    rw [Iso.eq_inv_comp]
    apply (structAux œÄ surj).uniq
    intro a
    simpa using hm a

end EffectiveEpiFamily

theorem effectiveEpiFamily_of_jointly_surjective
    {Œ± : Type} [Fintype Œ±] {B : ExtrDisc.{u}}
    (X : Œ± ‚Üí ExtrDisc.{u}) (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B))
    (surj : ‚àÄ b : B, ‚àÉ (a : Œ±) (x : X a), œÄ a x = b) :
    EffectiveEpiFamily X œÄ :=
  ‚ü®‚ü®ExtrDisc.EffectiveEpiFamily.struct œÄ surj‚ü©‚ü©

open List in
theorem effectiveEpiFamily_tfae {Œ± : Type} [Fintype Œ±] {B : ExtrDisc.{u}}
    (X : Œ± ‚Üí ExtrDisc.{u})
    (œÄ : (a : Œ±) ‚Üí (X a ‚ü∂ B)) :
    TFAE [
      EffectiveEpiFamily X œÄ,
      Epi (Limits.Sigma.desc œÄ),
      ‚àÄ (b : B), ‚àÉ (a : Œ±) (x : X a), œÄ a x = b
    ] := by
  tfae_have 1 ‚Üí 2
  ¬∑ intro
    infer_instance
    -- #check CategoryTheory.epiCoproductDescOfEffectiveEpiFamily
  tfae_have 2 ‚Üí 3
  ¬∑ intro e
    rw [epi_iff_surjective] at e
    let i : ‚àê X ‚âÖ finiteCoproduct X :=
      (colimit.isColimit _).coconePointUniqueUpToIso (finiteCoproduct.isColimit _)
    intro b
    obtain ‚ü®t,rfl‚ü© := e b
    let q := i.hom t
    refine ‚ü®q.1,q.2,?_‚ü©
    have : t = i.inv (i.hom t) := show t = (i.hom ‚â´ i.inv) t by simp only [i.hom_inv_id] ; rfl
    rw [this]
    show _ = (i.inv ‚â´ Sigma.desc œÄ) (i.hom t)
    suffices i.inv ‚â´ Sigma.desc œÄ = finiteCoproduct.desc X œÄ by
      rw [this] ; rfl
    rw [Iso.inv_comp_eq]
    apply colimit.hom_ext
    rintro ‚ü®a‚ü©
    simp only [Discrete.functor_obj, colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app,
      colimit.comp_coconePointUniqueUpToIso_hom_assoc]
    ext ; rfl
  tfae_have 3 ‚Üí 1
  ¬∑ apply effectiveEpiFamily_of_jointly_surjective
  tfae_finish

end ExtrDisc
